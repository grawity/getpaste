#!/usr/bin/env perl
# getpaste r12 - Retrieves raw text from a pastebin
# Released under WTFPL v2 <http://sam.zoy.org/wtfpl/>
use warnings;
use strict;
no locale;
use JSON;
use LWP::Simple;
use MIME::Base64;
use Nullroute::Lib qw(_err _die);

sub uri_split {
	my $str = shift;

	# stolen from URI::Split
	$str =~ m,(?:([^:/?#]+):)?(?://([^/?#]*))?([^?#]*)(?:\?([^#]*))?(?:#(.*))?,;
}

sub decode_html {
	my $str = shift;

	$str =~ s/&lt;/</g;
	$str =~ s/&gt;/>/g;
	$str =~ s/&quot;/"/g;
	$str =~ s/&amp;/\&/g;
	return $str;
}

sub try_decode_json {
	my $data = shift;

	ref $data ? $data : decode_json($data);
}

sub sjcl_decrypt {
	eval {
		require Crypt::AuthEnc::CCM;
		require Crypt::KeyDerivation;
	} or _die("missing Perl package \"CryptX\"");

	Crypt::AuthEnc::CCM->import(":all");
	Crypt::KeyDerivation->import("pbkdf2");

	my ($frag, $json) = @_;

	my $data = try_decode_json($json);

	if (($data->{v} //= "1") != 1) {
		_die("unsupported SJCL blob version ".$data->{v});
	}
	if (($data->{cipher} //= "aes") ne "aes") {
		_die("unsupported cipher ".$data->{cipher});
	}
	if (($data->{mode} //= "ccm") ne "ccm") {
		_die("unsupported mode ".$data->{mode});
	}

	my $salt = decode_base64($data->{salt});
	my $ct   = decode_base64($data->{ct});
	my $iv   = decode_base64($data->{iv});
	my $iter = int($data->{iter} || 1000),
	my $ks   = int($data->{ks} || 128) / 8;
	my $ts   = int($data->{ts} || 64) / 8;
	my $hdr  = decode_base64($data->{adata} // "");

	my $key = pbkdf2($frag, $salt, $iter, "SHA256", $ks);

	my $tag = substr($ct, -$ts, $ts, "");

	return ccm_decrypt_verify("AES", $key, $iv, $hdr, $ct, $tag)
	       // _die("decryption failed");
}

sub lzw_decompress {
	require Compress::LZW;

	my ($buf) = @_;

	return Compress::LZW->decompress($buf);
}

sub deflate_decompress {
	require Compress::Zlib;

	my ($buf) = @_;

	my ($stream, $outbuf, $status);

	($stream, $status) = Compress::Zlib::inflateInit(
		-WindowBits => -Compress::Zlib->MAX_WBITS,
	);

	if (!defined $stream || $status != Compress::Zlib->Z_OK) {
		_die("inflateInit failed: $status");
	}

	($outbuf, $status) = $stream->inflate($buf);

	if (!defined $outbuf || ($status != Compress::Zlib->Z_OK &&
		                 $status != Compress::Zlib->Z_STREAM_END)) {
		_die("inflate failed: $status (".$stream->msg.")");
	}

	return $outbuf;
}

sub dl_0bin {
	my ($url, $frag) = @_;

	if (!length $frag) {
		_die("cannot decrypt without key in URL fragment");
	}

	my $body = get($url);
	$body =~ m{<code>\n\s*(\{.+\})\n\s*</code>} || return;

	my $data = decode_html($1);
	# the URL fragment is *not* decoded before passing to KDF
	$data = sjcl_decrypt($frag, $data);
	$data = decode_base64($data);
	# currently 0bin does not compress with LZW anymore
	#$data = lzw_decompress($data);
	return $data;
}

sub dl_zerobin {
	my ($url, $frag) = @_;

	if (!length $frag) {
		_die("cannot decrypt without key in URL fragment");
	}

	my $body = get($url);
	$body =~ m{<div id="cipherdata" style="display:none;">(.+)</div>} || return;

	my $data = decode_html($1);
	$data = decode_json($data)->[0]->{data};
	# the URL fragment is *not* decoded before passing to KDF
	$data = sjcl_decrypt($frag, $data);
	$data = decode_base64($data);
	$data = deflate_decompress($data);
	return $data;
}

sub parse_url {
	my ($url) = @_;
	my ($scheme, $host, $path, $query, $frag) = uri_split $url;

	if (!defined($host) || !defined($path)) {
		_die("bad URL: $url");
	}

	$path =~ s|^/||;

	if ($host =~ /^sprunge\.us$/)
		{ return $url }

	elsif ($host =~ /^codepad\.org$/ and $path =~ m!^(\w+)!)
		{ return "http://$host/$1/raw.txt" }

	elsif ($host =~ /^dpaste\.(org|de)$/ and $path =~ m!^(\w+)!)
		{ return "http://$host/$1/raw/" }

	elsif ($host =~ /^dpaste\.com$/ and $path =~ m!^(?:hold/)?(\d+)!)
		{ return "http://$host/$1/plain/" }

	elsif ($host =~ /^(?:[\w-]+\.)?pastebin\.ca$/ and $path =~ m!^(?:raw/)?(\d+)!)
		{ return "http://$host/raw/$1" }

	elsif ($host =~ /^pastebin\.com$/ and $path =~ m!^(?:index/)?(\w+)!)
		{ return "http://$host/download.php?i=$1" }

	elsif ($host =~ /^pastebin(\.centos|\.mozilla)?\.org$/
		and $path =~ m!^(?:pastebin\.php\?dl=)?(\d+)!)
		{ return "http://$host/pastebin.php?dl=$1" }

	elsif ($host =~ /^paste\.linuxassist\.net$/ and $path =~ m!(\d+)!)
		{ return "http://linux:linux\@$host/pastebin.php?raw=$1" }

	elsif ($host =~ /^pastie\.org$/ and $path =~ m!^(\d+)!)
		{ return "http://$host/pastes/$1/download" }

	elsif ($host =~ /(?:dark-)?code\.bulix\.org$/ and $path =~ m!^(\w+-\d+)!)
		{ return "http://$host/$1?raw" }

	elsif ($host =~ /^fpaste\.org$/ and $path =~ m!^(\w+)!)
		{ return "http://$host/$1/raw/" }

	elsif ($host =~ /^paste\.fedoraproject\.org$/)
		{ return "http://$host/$path/raw" }

	elsif ($host =~ /^pastebin\.de$/ and $path =~ m!^(\d+)!)
		{ return "http://$host/download/?id=$1" }

	elsif ($host =~ /^privatepaste\.com$/ and $path =~ m!^(\w+)!)
		{ return "http://$host/download/$1" }

	elsif ($host =~ /^gist\.github\.com$/)
		{ return "https://$host/$path.txt" }

	elsif ($host =~ /^hastebin\.com$/ and $path =~ m!^(\w+)!)
		{ "http://hastebin.com/raw/$1" }

	elsif ($host =~ /^0bin\.net$/)
		{ $url, \&dl_0bin, $frag }

	elsif ($host =~ /^(zerobin\.net|(pastebin\.aquilenet|paste\.necronomicon)\.fr)$/)
		{ $url, \&dl_zerobin, $frag }

	elsif ($host =~ /^sebsauvage\.net$/ and $path =~ m!^paste/!)
		{ $url, \&dl_zerobin, $frag }

	elsif ($host =~ /^www\.dropbox\.com$/)
		{ "https://dl.dropboxusercontent.com/$path" }

	elsif ($host =~ /^(www\.)?irccloud\.com$/ and $path =~ m!^pastebin/(\w+)!)
		{ "https://$host/pastebin/$1.raw" }

	else
		{ return undef }
}

my $showurl = ($ARGV[0] eq "-u");
shift @ARGV if $showurl;

if (!@ARGV) {
	warn "Usage: getpaste [-u] <url>\n";
	exit 2;
}

for my $url (@ARGV) {
	my ($raw, $handler, @hargs) = parse_url($url);
	if (!defined $raw && !defined $handler) {
		_err("unknown pastebin: $url");
	} elsif ($showurl) {
		if ($handler) {
			_err("pastebin does not have raw URLs: $url");
		} else {
			print "$raw\n";
		}
	} else {
		if ($handler) {
			print $handler->($raw, @hargs)."\n";
		} else {
			getprint $raw;
		}
	}
}

exit $::errors;
